{"version":3,"sources":["assets/icons/weather_200.svg","assets/icons/weather_210.svg","assets/icons/weather_300.svg","assets/icons/weather_500.svg","assets/icons/weather_501.svg","assets/icons/weather_502.svg","assets/icons/weather_600.svg","assets/icons/weather_601.svg","assets/icons/weather_700.svg","assets/icons/weather_800.svg","assets/icons/weather_801.svg","assets/icons/weather_803.svg","data/data.js","data/data-handler.js","components/locationSearchInput/locationSearchInput.js","components/searchForm/searchForm.js","components/weather/weather.js","components/map-pointer/mapPointer.js","components/map/map.js","components/forecastCard/forecastCard.js","components/forecast/forecast.js","components/resultsSet/resultsSet.js","App.js","index.js"],"names":["module","exports","DATA","200","Icon200","210","Icon210","300","Icon300","500","Icon500","501","Icon501","502","Icon502","600","Icon600","601","Icon601","700","Icon700","800","Icon800","801","Icon801","803","Icon803","properties","Object","getOwnPropertyNames","map","el","parseInt","iconSelect","id","find","num","LocationSearchInput","handleAddressChange","renderSuggestions","active","suggestions","onSelectSuggestion","className","suggestion","onClick","event","onKeyDown","role","tabIndex","key","place_id","description","onSelect","terms","defaultProps","SearchForm","getWeather","isAdressVerified","Container","Form","onSubmit","Field","Button","size","inverted","type","disabled","Weather","weather","temp","feelTemp","tempMin","tempMax","pressure","humidity","icon","message","modal","weatherDataTemerature","title","value","weatherDataOthers","symbol","Image","src","alt","toUpperCase","MapPointer","Map","lat","lng","bootstrapURLKeys","process","center","zoom","ForecastCard","day","hourWeather","weekWeather","hour","hourForecastHour","hourForecastTemp","hourForecastIcon","hourForecastFeelTemp","hourForecastTempMin","hourForecastTempMax","hourForecastPressure","hourForecastHumidity","hourForecastDescription","weekForecastDay","weekForecastDayOfWeek","weekForecastMonth","weekForecastTemp","weekForecastIcon","weekForecastId","weatherHour","weatherWeek","weekForecastFeelTemp","weekForecastTempMin","weekForecastTempMax","weekForecastPressure","weekForecastHumidity","weekForecastDescription","days","0","1","2","3","4","5","6","months","7","8","9","10","11","dateEnd","weekInfoText","convertToDay","hourInfoText","temperature","time","modalHeaderText","Modal","color","trigger","Card","Content","Header","extra","Forecast","hourForecast","weekForecast","toggleWeatherRange","ResultsSet","isAdditionalClass","useState","isHourWeather","setIsHourWeather","Grid","Column","width","initialWeather","city","country","hourForecastId","error","initialAddress","initialMessage","App","setWeather","setMessage","address","setAddress","isSearchFound","setIsSearchFound","setIsAdditionalClass","useEffect","convertToHours","unix","Date","getHours","convertToDateObject","getDate","dayOfWeek","getDay","month","getMonth","handleWeatherError","errorMessage","weatherURL","hourForecastUrl","weatherURLs","e","a","preventDefault","Promise","all","url","fetch","then","data","json","fetchAll","weatherData","weatherDataHours","setTimeout","name","sys","coord","lon","Math","round","main","feels_like","temp_min","temp_max","list","slice","item","dt","filter","countryName","termsValues","cityName","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82baecd5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather_200.006e1fc7.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_210.ee36c686.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_300.811ba74f.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_500.bd5ad005.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_501.aa522a6c.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_502.5c05e906.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_600.17cafab0.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_601.79d1c380.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_700.0ecbe8be.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_800.ea882d2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_801.1075e6dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather_803.2fd75af0.svg\";","import Icon200 from '../assets/icons/weather_200.svg';\r\nimport Icon210 from '../assets/icons/weather_210.svg';\r\nimport Icon300 from '../assets/icons/weather_300.svg';\r\nimport Icon500 from '../assets/icons/weather_500.svg';\r\nimport Icon501 from '../assets/icons/weather_501.svg';\r\nimport Icon502 from '../assets/icons/weather_502.svg';\r\nimport Icon600 from '../assets/icons/weather_600.svg';\r\nimport Icon601 from '../assets/icons/weather_601.svg';\r\nimport Icon700 from '../assets/icons/weather_700.svg';\r\nimport Icon800 from '../assets/icons/weather_800.svg';\r\nimport Icon801 from '../assets/icons/weather_801.svg';\r\nimport Icon803 from '../assets/icons/weather_803.svg';\r\n\r\nconst DATA = {\r\n  200: Icon200,\r\n  210: Icon210,\r\n  300: Icon300,\r\n  500: Icon500,\r\n  501: Icon501,\r\n  502: Icon502,\r\n  600: Icon600,\r\n  601: Icon601,\r\n  700: Icon700,\r\n  800: Icon800,\r\n  801: Icon801,\r\n  803: Icon803,\r\n};\r\n\r\nexport default DATA;\r\n","import DATA from './data';\r\n\r\nconst properties = Object.getOwnPropertyNames(DATA).map((el) => parseInt(el));\r\n\r\nexport const iconSelect = (id) => {\r\n  if (properties.find((num) => num === id)) {\r\n    return DATA[id];\r\n  }\r\n  if (id > 200 && id < 210) {\r\n    return DATA[200];\r\n  }\r\n  if (id > 210 && id < 233) {\r\n    return DATA[210];\r\n  }\r\n  if (id > 300 && id < 322) {\r\n    return DATA[300];\r\n  }\r\n  if (id > 502 && id < 532) {\r\n    return DATA[502];\r\n  }\r\n  if (id > 602 && id < 623) {\r\n    return DATA[601];\r\n  }\r\n  if (id > 700 && id < 782) {\r\n    return DATA[700];\r\n  }\r\n  if (id === 802) {\r\n    return DATA[801];\r\n  }\r\n  if (id === 804) {\r\n    return DATA[803];\r\n  }\r\n};\r\n","import React from 'react';\r\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\r\nimport PropTypes from 'prop-types';\r\nimport './locationSearchInput.scss';\r\n\r\nconst LocationSearchInput = ({ handleAddressChange }) => {\r\n  return (\r\n    <div>\r\n      <GooglePlacesAutocomplete\r\n        renderSuggestions={(active, suggestions, onSelectSuggestion) => (\r\n          <div className=\"suggestions\">\r\n            {suggestions.map((suggestion) => (\r\n              <div\r\n                className=\"suggestion\"\r\n                onClick={(event) => onSelectSuggestion(suggestion, event)}\r\n                onKeyDown={(event) => onSelectSuggestion(suggestion, event)}\r\n                role=\"button\"\r\n                tabIndex={0}\r\n                key={suggestion.place_id}\r\n              >\r\n                {suggestion.description}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        onSelect={({ terms, description }) => handleAddressChange(terms, description)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nLocationSearchInput.propTypes = {\r\n  handleAddressChange: PropTypes.func,\r\n};\r\n\r\nLocationSearchInput.defaultProps = {\r\n  handleAddressChange: () => {},\r\n};\r\n\r\nexport default LocationSearchInput;\r\n","import React from 'react';\r\nimport { Container, Form, Button } from 'semantic-ui-react';\r\nimport LocationSearchInput from '../locationSearchInput/locationSearchInput';\r\nimport './searchForm.scss';\r\n\r\nconst SearchForm = ({ handleAddressChange, getWeather, isAdressVerified }) => (\r\n  <Container className=\"form__container\">\r\n    <Form className=\"form\" onSubmit={getWeather}>\r\n      <Form.Field className=\"form__field\">\r\n        <LocationSearchInput handleAddressChange={handleAddressChange} />\r\n      </Form.Field>\r\n\r\n      <Button className=\"form__button\" size=\"big\" inverted type=\"submit\" disabled={!isAdressVerified()}>\r\n        Search for weather\r\n      </Button>\r\n    </Form>\r\n  </Container>\r\n);\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\nimport { Container, Image } from 'semantic-ui-react';\r\nimport './weather.styles.scss';\r\n\r\nconst Weather = ({\r\n  weather: { temp, feelTemp, tempMin, tempMax, pressure, humidity, description, icon },\r\n  message,\r\n  modal,\r\n}) => {\r\n  const weatherDataTemerature = [\r\n    { title: 'Temperature', value: `${temp}` },\r\n    { title: 'Feel temperature', value: `${feelTemp}` },\r\n    { title: 'Min. temperature', value: `${tempMin}` },\r\n    { title: 'Max. Temperature', value: `${tempMax}` },\r\n  ];\r\n\r\n  const weatherDataOthers = [\r\n    { title: 'Pressure', value: `${pressure} `, symbol: 'hPa' },\r\n    { title: 'Humidity', value: `${humidity}`, symbol: '%' },\r\n  ];\r\n  return (\r\n    <Container className={modal ? 'weather weather-modal' : 'weather'}>\r\n      <h4 className=\"weather__heading\">{message}</h4>\r\n      <Container className=\"weather__container\">\r\n        <Container className=\"weather__container-col1\">\r\n          {weatherDataTemerature.map(({ title, value }) => {\r\n            return (\r\n              <p key={title}>\r\n                {title}: <span className=\"weather__span\">{value} &#8451;</span>\r\n              </p>\r\n            );\r\n          })}\r\n\r\n          {weatherDataOthers.map(({ title, value, symbol }) => {\r\n            return (\r\n              <p key={title}>\r\n                {title}:{' '}\r\n                <span className=\"weather__span\">\r\n                  {value}\r\n                  {symbol}\r\n                </span>\r\n              </p>\r\n            );\r\n          })}\r\n        </Container>\r\n        <Container className=\"weather__container-col2\">\r\n          <Image src={icon} alt=\"weather icon\" size=\"medium\" />\r\n          <p>{description.toUpperCase()}</p>\r\n        </Container>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nimport \"./map-pointer.styles.scss\";\r\n\r\nconst MapPointer = () => {\r\n  return (\r\n    <div className=\"map-pointer\">\r\n      <p>Here</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPointer;\r\n","import React from 'react';\r\n// styles\r\nimport './map.styles.scss';\r\n// components\r\nimport GoogleMapReact from 'google-map-react';\r\nimport MapPointer from '../map-pointer/mapPointer';\r\n\r\nconst Map = ({ weather: { lat, lng } }) => {\r\n  return (\r\n    <div className=\"map\">\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_API_KEY }}\r\n        center={{ lat, lng }}\r\n        zoom={8}\r\n      >\r\n        <MapPointer lat={lat} lng={lng} />\r\n      </GoogleMapReact>\r\n    </div>\r\n  );\r\n};\r\nexport default Map;\r\n","import React from 'react';\r\nimport { Image, Card, Modal } from 'semantic-ui-react';\r\nimport Weather from '../weather/weather';\r\nimport './forecastCard.styles.scss';\r\n\r\nconst ForecastCard = ({ hourWeather, weekWeather, hour }) => {\r\n  const {\r\n    hourForecastHour,\r\n    hourForecastTemp,\r\n    hourForecastIcon,\r\n    hourForecastFeelTemp,\r\n    hourForecastTempMin,\r\n    hourForecastTempMax,\r\n    hourForecastPressure,\r\n    hourForecastHumidity,\r\n    hourForecastDescription,\r\n  } = hourWeather;\r\n\r\n  const {\r\n    weekForecastDay,\r\n    weekForecastDayOfWeek,\r\n    weekForecastMonth,\r\n    weekForecastTemp,\r\n    weekForecastId,\r\n    weekForecastIcon,\r\n    weekForecastFeelTemp,\r\n    weekForecastTempMin,\r\n    weekForecastTempMax,\r\n    weekForecastPressure,\r\n    weekForecastHumidity,\r\n    weekForecastDescription,\r\n  } = weekWeather;\r\n\r\n  const weatherHour = {\r\n    temp: hourForecastTemp,\r\n    feelTemp: hourForecastFeelTemp,\r\n    tempMin: hourForecastTempMin,\r\n    tempMax: hourForecastTempMax,\r\n    pressure: hourForecastPressure,\r\n    humidity: hourForecastHumidity,\r\n    description: hourForecastDescription,\r\n    icon: hourForecastIcon,\r\n  };\r\n\r\n  const weatherWeek = {\r\n    temp: weekForecastTemp,\r\n    feelTemp: weekForecastFeelTemp,\r\n    tempMin: weekForecastTempMin,\r\n    tempMax: weekForecastTempMax,\r\n    pressure: weekForecastPressure,\r\n    humidity: weekForecastHumidity,\r\n    description: weekForecastDescription,\r\n    icon: weekForecastIcon,\r\n  };\r\n\r\n  const days = {\r\n    0: 'Monday',\r\n    1: 'Tuesday',\r\n    2: 'Wednesday',\r\n    3: 'Thursday',\r\n    4: 'Friday',\r\n    5: 'Saturday',\r\n    6: 'Sunday',\r\n  };\r\n  const months = {\r\n    0: 'Jan.',\r\n    1: 'Feb.',\r\n    2: 'Mar.',\r\n    3: 'Apr.',\r\n    4: 'May.',\r\n    5: 'Jun.',\r\n    6: 'Jul.',\r\n    7: 'Aug.',\r\n    8: 'Sept.',\r\n    9: 'Oct.',\r\n    10: 'Nov.',\r\n    11: 'Dec.',\r\n  };\r\n\r\n  const convertToDay = (day) => days[day];\r\n  const convertToMonth = (month) => months[month];\r\n  const getEndDay = (day) => {\r\n    if (day === 1) {\r\n      return 'st';\r\n    }\r\n    if (day === 2) {\r\n      return 'nd';\r\n    }\r\n    return 'th';\r\n  };\r\n\r\n  const dateEnd = getEndDay(weekForecastDay);\r\n  const weekInfoText = `${convertToDay(weekForecastDayOfWeek)}, ${weekForecastDay}${dateEnd} ${convertToMonth(\r\n    weekForecastMonth\r\n  )}`;\r\n  const hourInfoText = `${hourForecastHour}:00`;\r\n  const temperature = hour ? hourForecastTemp : weekForecastTemp;\r\n  const time = hour ? hourInfoText : weekInfoText;\r\n  const modalHeaderText = hour ? `at ${hourInfoText}` : `on ${weekInfoText}`;\r\n  const icon = hour ? hourForecastIcon : weekForecastIcon;\r\n\r\n  return (\r\n    <Modal\r\n      color=\"black\"\r\n      className=\"modal\"\r\n      trigger={\r\n        <Card className={hour ? 'card' : 'card card-week'}>\r\n          <Card.Content>\r\n            <Card.Header className=\"card__header\">{temperature} &#8451;</Card.Header>\r\n\r\n            <Image src={icon} alt=\"Hour forecast\" size=\"small\" />\r\n          </Card.Content>\r\n          <Card.Content extra className=\"card__footer\">\r\n            {time}\r\n          </Card.Content>\r\n        </Card>\r\n      }\r\n    >\r\n      <Modal.Header className=\"modal__header\">{`Expected weather ${modalHeaderText}`}</Modal.Header>\r\n      <Modal.Content className=\"modal__content\">\r\n        <Weather weather={hour ? weatherHour : weatherWeek} modal />\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ForecastCard;\r\n","import React from 'react';\r\nimport { Container, Button } from 'semantic-ui-react';\r\nimport ForecastCard from '../forecastCard/forecastCard';\r\nimport './forecast.scss';\r\n\r\nconst Forecast = ({ weather: { hourForecast, weekForecast }, hour, toggleWeatherRange }) => {\r\n  return (\r\n    <Container className=\"forecast\">\r\n      <Button inverted onClick={toggleWeatherRange} className=\"forecast__button\">\r\n        {hour ? '5 days weather' : 'hour weather'}\r\n      </Button>\r\n      {hour ? (\r\n        <Container className=\"forecast__content\">\r\n          <h2>Hour forecast</h2>\r\n          <Container className=\"forecast__icons\">\r\n            {hourForecast.map((hourWeather) => (\r\n              <ForecastCard hourWeather={hourWeather} weekWeather={{}} hour key={hourWeather.hourForecastHour} />\r\n            ))}\r\n          </Container>\r\n        </Container>\r\n      ) : (\r\n        <Container className=\"forecast__content\">\r\n          <h2>5 days forecast</h2>\r\n          <Container className=\"forecast__icons\">\r\n            {weekForecast.map((weekWeather) => (\r\n              <ForecastCard weekWeather={weekWeather} hourWeather={{}} key={weekWeather.weekForecastDay} />\r\n            ))}\r\n          </Container>\r\n        </Container>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React, { useState } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport './resultsSet.scss';\r\nimport Weather from '../weather/weather';\r\nimport Map from '../map/map';\r\nimport Forecast from '../forecast/forecast';\r\n\r\nconst ResultsSet = ({ weather, message, isAdditionalClass }) => {\r\n  const [isHourWeather, setIsHourWeather] = useState(true);\r\n\r\n  const toggleWeatherRange = () => {\r\n    setIsHourWeather(!isHourWeather);\r\n  };\r\n\r\n  return (\r\n    <Grid className={isAdditionalClass ? 'resultsSet  resultsSet-animation' : 'resultsSet'}>\r\n      <Grid.Column className=\"resultsSet-col1\" width={8}>\r\n        <Weather weather={weather} message={message} />\r\n      </Grid.Column>\r\n      <Grid.Column width={8}>\r\n        <Forecast weather={weather} hour={isHourWeather} toggleWeatherRange={toggleWeatherRange} />\r\n        <Map weather={weather} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ResultsSet;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Container, Header, Button } from 'semantic-ui-react';\r\n// styles\r\nimport './App.scss';\r\nimport { iconSelect } from './data/data-handler';\r\nimport SearchForm from './components/searchForm/searchForm';\r\nimport ResultsSet from './components/resultsSet/resultsSet';\r\n\r\nconst initialWeather = {\r\n  city: '',\r\n  country: '',\r\n  lat: '',\r\n  lng: '',\r\n  temp: '',\r\n  feelTemp: '',\r\n  tempMin: '',\r\n  tempMax: '',\r\n  pressure: '',\r\n  humidity: '',\r\n  description: '',\r\n  id: '',\r\n  icon: '',\r\n  hourForecast: {\r\n    id: '',\r\n    hourForecastHour: '',\r\n    hourForecastTemp: '',\r\n    hourForecastId: '',\r\n    hourForecastIcon: '',\r\n    hourForecastFeelTemp: '',\r\n    hourForecastTempMin: '',\r\n    hourForecastTempMax: '',\r\n    hourForecastPressure: '',\r\n    hourForecastHumidity: '',\r\n    hourForecastDescription: '',\r\n  },\r\n  weekForecast: {\r\n    id: '',\r\n    weekForecastDay: '',\r\n    weekForecastDayOfWeek: '',\r\n    weekForecastMonth: '',\r\n    weekForecastTemp: '',\r\n    weekForecastId: '',\r\n    weekForecastIcon: '',\r\n    weekForecastFeelTemp: '',\r\n    weekForecastTempMin: '',\r\n    weekForecastTempMax: '',\r\n    weekForecastPressure: '',\r\n    weekForecastHumidity: '',\r\n    weekForecastDescription: '',\r\n  },\r\n  error: null,\r\n};\r\n\r\nconst initialAddress = {\r\n  city: '',\r\n  country: '',\r\n  description: '',\r\n};\r\n\r\nconst initialMessage = 'Welcome, type your city and country names above.';\r\n\r\nconst App = () => {\r\n  const [weather, setWeather] = useState(initialWeather);\r\n  const [message, setMessage] = useState(initialMessage);\r\n  const [address, setAddress] = useState(initialAddress);\r\n  const [isSearchFound, setIsSearchFound] = useState(false);\r\n  const [isAdditionalClass, setIsAdditionalClass] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const { city, country, error } = weather;\r\n    const { description } = address;\r\n\r\n    if (city && country && !error) {\r\n      setMessage(description);\r\n    } else if (error) {\r\n      setMessage(error);\r\n    }\r\n  }, [weather, address]);\r\n\r\n  const handleAddressChange = (terms, description) => {\r\n    let countryName;\r\n    const termsValues = terms.map(({ value }) => value);\r\n    const [cityName] = termsValues;\r\n\r\n    if (terms.length > 2) {\r\n      [, , countryName] = termsValues;\r\n    } else {\r\n      [, countryName] = termsValues;\r\n    }\r\n\r\n    setAddress({ city: cityName, country: countryName, description });\r\n  };\r\n\r\n  const convertToHours = (unix) => new Date(unix * 1000).getHours();\r\n\r\n  const convertToDateObject = (unix) => {\r\n    const time = new Date(unix * 1000);\r\n    return {\r\n      hour: time.getHours(),\r\n      day: time.getDate(),\r\n      dayOfWeek: time.getDay(),\r\n      month: time.getMonth(),\r\n    };\r\n  };\r\n\r\n  const handleWeatherError = (errorMessage) => {\r\n    setWeather({\r\n      ...weather,\r\n      error: errorMessage,\r\n    });\r\n  };\r\n\r\n  const resetSearch = () => {\r\n    setWeather(initialWeather);\r\n    setMessage(initialMessage);\r\n    setAddress(initialAddress);\r\n    setIsSearchFound(false);\r\n\r\n    setIsAdditionalClass(false);\r\n  };\r\n\r\n  const weatherURL = (city, country) =>\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`;\r\n\r\n  const hourForecastUrl = (city, country) =>\r\n    `https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`;\r\n\r\n  const weatherURLs = (city, country) => [weatherURL(city, country), hourForecastUrl(city, country)];\r\n\r\n  // API call\r\n  const getWeather = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { city, country } = address;\r\n\r\n    try {\r\n      const fetchAll = await Promise.all(\r\n        // eslint-disable-next-line no-undef\r\n        weatherURLs(city, country).map((url) => fetch(url).then((data) => data.json()))\r\n      );\r\n\r\n      const weatherData = await fetchAll[0];\r\n      const weatherDataHours = await fetchAll[1];\r\n\r\n      if (!!weatherData && !!weatherDataHours) {\r\n        setIsAdditionalClass(true);\r\n        setTimeout(() => {\r\n          setWeather({\r\n            city: weatherData.name,\r\n            country: weatherData.sys.country,\r\n            lat: weatherData.coord.lat,\r\n            lng: weatherData.coord.lon,\r\n            temp: Math.round(weatherData.main.temp),\r\n            feelTemp: Math.round(weatherData.main.feels_like),\r\n            tempMin: Math.round(weatherData.main.temp_min),\r\n            tempMax: Math.round(weatherData.main.temp_max),\r\n            pressure: weatherData.main.pressure,\r\n            humidity: weatherData.main.humidity,\r\n            description: weatherData.weather[0].description,\r\n            id: weatherData.weather[0].id,\r\n            icon: iconSelect(weatherData.weather[0].id),\r\n            error: null,\r\n            hourForecast: weatherDataHours.list.slice(0, 8).map((item) => {\r\n              return {\r\n                id: item.dt,\r\n                hourForecastHour: convertToDateObject(item.dt).hour,\r\n                hourForecastTemp: Math.round(item.main.temp),\r\n                hourForecastId: item.weather[0].id,\r\n                hourForecastIcon: iconSelect(item.weather[0].id),\r\n                hourForecastFeelTemp: Math.round(item.main.feels_like),\r\n                hourForecastTempMin: Math.round(item.main.temp_min),\r\n                hourForecastTempMax: Math.round(item.main.temp_max),\r\n                hourForecastPressure: item.main.pressure,\r\n                hourForecastHumidity: item.main.humidity,\r\n                hourForecastDescription: item.weather[0].description,\r\n              };\r\n            }),\r\n            weekForecast: weatherDataHours.list\r\n              .filter((item) => {\r\n                const minHour = 11;\r\n                const maxHour = 13;\r\n                return convertToHours(item.dt) >= minHour && convertToHours(item.dt) <= maxHour;\r\n              })\r\n              .map((item) => {\r\n                return {\r\n                  id: item.dt,\r\n                  weekForecastDay: convertToDateObject(item.dt).day,\r\n                  weekForecastDayOfWeek: convertToDateObject(item.dt).dayOfWeek,\r\n                  weekForecastMonth: convertToDateObject(item.dt).month,\r\n                  weekForecastTemp: Math.round(item.main.temp),\r\n                  weekForecastId: item.weather[0].id,\r\n                  weekForecastIcon: iconSelect(item.weather[0].id),\r\n                  weekForecastFeelTemp: Math.round(item.main.feels_like),\r\n                  weekForecastTempMin: Math.round(item.main.temp_min),\r\n                  weekForecastTempMax: Math.round(item.main.temp_max),\r\n                  weekForecastPressure: item.main.pressure,\r\n                  weekForecastHumidity: item.main.humidity,\r\n                  weekForecastDescription: item.weather[0].description,\r\n                };\r\n              }),\r\n          });\r\n          setIsSearchFound(true);\r\n        }, 3000);\r\n      } else {\r\n        setWeather(initialWeather);\r\n        handleWeatherError('Please enter city and country');\r\n      }\r\n    } catch (error) {\r\n      setWeather(initialWeather);\r\n      handleWeatherError('Please enter right city and country name');\r\n    }\r\n  };\r\n\r\n  const isAdressVerified = () => {\r\n    const { city, country } = address;\r\n\r\n    return !!city && !!country;\r\n  };\r\n  return (\r\n    <Container className=\"app\">\r\n      <Header className=\"app__header \">\r\n        <h1 className=\"header__heading\">Weather App</h1>\r\n        {isSearchFound && (\r\n          <Button className=\"header__button\" inverted onClick={resetSearch}>\r\n            Start new search\r\n          </Button>\r\n        )}\r\n      </Header>\r\n      <Container className={isAdditionalClass ? 'app__content app__content-animation' : 'app__content'}>\r\n        {isSearchFound ? (\r\n          <ResultsSet weather={weather} message={message} />\r\n        ) : (\r\n          <Container className={isAdditionalClass ? 'searchSection searchSection-animation' : 'searchSection'}>\r\n            <SearchForm\r\n              handleAddressChange={handleAddressChange}\r\n              getWeather={getWeather}\r\n              isAdressVerified={isAdressVerified}\r\n            />\r\n            <h4 className=\"searchSection__text\">{message}</h4>\r\n          </Container>\r\n        )}\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}